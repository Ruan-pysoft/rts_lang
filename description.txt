Because I'm having difficulty with the code atm,
I'm going to write a description of what I'm working towards.

= The basic idea =

The idea is to implement type checking on a stack-based program,
the syntax of which should be much easier to parse than a procedural one.

The idea is that each command would modify the stack in some fixed way,
from a typing perspective.
Eg. an input function might return "hi" or "bye" or "asdf",
but it will always return a string,
and so is deterministic from a typing perspective.

This means that the type checking can be implemented
as a stack-based language of sort itself.
I believe that it should always be guaranteed to terminate
(since it is entirely deterministic and doesn't contain loops(?)).

Some operations (such as drop or dup) would require generics,
and the output cannot contain a generic not present in the input.

Some operations (such as addition) would perhaps need rust-like traits
(ie. generics with restrictions on the input types).

When "applying" an operation to the stack of types,
the generics can be then resolved based on the current contents of the stack.

Theoretically, having a fully typed language will make optimisations easier,
by having separate stacks for each type,
allowing a stack of mixed types without keeping track of types at runtime
(ie. a mix of different sized values on the stack),
or by compiling it (whether to assembly, c, ir, or direct machine code).

= For now =

For now I'm only going to implement basic types needed for functionality:
an int and a bool type, "transform" types (block/function signatures),
and catch-all generics.

Structured types, arrays, restricted generics, tuples, other numeric types,
strings, etc. can all be implemented later.

= Implementation =

Currently there are three syntactic units:

 1. A "word", which either pushes its associated value
    or calls its associated block
 2. An "assignment", which removes the top value of the stack
    and assigns it to the word following
 3. A "block", which pushes the block described to the stack

There are two types of types (besides generics:

 1. A "simple" type (bool, int).
    When executed, pushes a value of said type to the stack.
 2. A "transform" type (... -> ...).
    When executed, removes the input types from the stack
    and pushes the output types.

For type checking, we have a type stack.

Conceptually, the source consists of a list of types
where each type is either pushed (literals) or executed (words).

When a type is pushed, it always succeeds.

When a type is executed,
it is first matched against the stack,
and if the stack matches,
then its transformation is applied.

Each block should also be checked.
To check a block,
a new type stack should be initialised with its input types,
and then its contents should be applied,
and finally the resulting type stack should agree with its output types.
